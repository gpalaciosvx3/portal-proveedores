feat: Cuando se añade una nueva funcionalidad o característica al proyecto.
Ejemplo: feat: Add user authentication module
fix: Cuando se corrige un error en el código.

Ejemplo: fix: Resolve login page crash on invalid credentials
chore: Para cambios menores y mantenimiento del proyecto, como actualizaciones de dependencias o cambios en la configuración que no afectan la lógica del código.

Ejemplo: chore: Update Node.js to version 14.x
refactor: Para cambios en el código que no añaden funcionalidad nueva ni corrigen errores, pero que mejoran la estructura o claridad del código.

Ejemplo: refactor: Simplify data fetching logic in user service
docs: Para cambios en la documentación del proyecto.

Ejemplo: docs: Update README with API endpoint details
test: Para añadir o modificar pruebas unitarias o de integración.

Ejemplo: test: Add unit tests for user registration
style: Para cambios de formato, como la corrección de indentación o el formato de código, que no afectan la lógica del código.

Ejemplo: style: Fix code indentation in main.scss
perf: Para mejoras en el rendimiento.

Ejemplo: perf: Optimize database queries for faster response times
Ejemplos de Commit Messages
feat: Implement initial user login functionality
fix: Correct SQL query to avoid duplicate entries
chore: Add .gitignore file and initial project setup
refactor: Rename variables for better clarity
docs: Add API documentation for invoice upload
test: Create unit tests for authentication middleware
style: Apply consistent code formatting